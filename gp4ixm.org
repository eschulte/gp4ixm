# -*- mode: org -*-
#+TITLE: Distributed GP for IXM
#+OPTIONS: num:nil ^:t toc:2
#+LaTeX_CLASS: normal

* Introduction

Implementing Genetic Programming (GP) in a distributed manner for a
group of IXM boards.

links
- [[http://harvey.cs.unm.edu/robust/doku.php?id=projects:distributed_ga_for_ixm][project wiki page]]
- [[http://github.com/eschulte/gp4ixm][github code page]]
- [[http://eschulte.github.com/gp4ixm/gp4ixm.html][github project page]]

* Instillation
use the following to grab a full copy of this repository
#+begin_src sh
  git clone git://github.com/eschulte/gp4ixm.git
  cd gp4ixm
  git submodule init
  git submodule update
#+end_src

* Components
** collector
  :PROPERTIES:
  :CUSTOM_ID: collector
  :END:
This functionality is now extracted into a separate file
=collector.cpp= which can be included into a sketch as demonstrated in
=collector/sketch.pde= in the repository.

It can be used to report integers, strings, or doubles to a laptop or
central collector attached to a group of IXM boards.  Along with the
value boards will report their location in terms of the path taken
from the central collector to get to the board.  For example of path
of "rflf" mean from the board immediately next to the laptop go...
- out the right (from the laptop)
- forward (straight through the board out the far face)
- left (from the entering face)
- forward

The boards need to be told where to report to before they will begin
their reports.  So to use this functionality you must first send a =c=
packet to your sketch containing an integer counter (boards will only
pay attention if the integer counter is greater than what they've
already seen).  So for example the following is the output of the
example sketch in =collector/sketch.pde=...

#+begin_example 
  c2                  # user input

  c45                 # output from first board (no path)
  c3.14
  cschulte
  c45 r               # output from board to the right of first board
  c3.14 r
  cschulte r
  c45
  c3.14
  cschulte
  c45 r
  c3.14 r
  cschulte r
#+end_example

** scrutinizer
  :PROPERTIES:
  :CUSTOM_ID: scrutinizer
  :END:
The scrutinizer is a ruby script which uses [[http://github.com/mixonic/libixm][libixm]] to monitor the
output of the [[collector]] sketch.  It uses the output of the collector
to maintain a collection of data structures representing the reporting
boards in the group.  Each board holds the following information
#+begin_src ruby
  # An ixm board with location and value
  class Board
    attr_accessor :location, :value, :cords
#+end_src
where =location= is the location of the board in terms of turns, as
reported form the ixms (e.g. "flrfflf"), =value= is a scalar value
reported by the board, and =cords= is the 2D coordinates of the board
with the laptop/usb-cord positioned at the origin.

The scrutinizer can generate 3D graphs of the data collected form the
boards using [[http://www.gnuplot.info/][gnuplot]].

*** usage
to run the scrutinizer
1) be sure that you have built the collector sketch
   #+begin_src sh
     cd collector
     make
   #+end_src
2) then run the scrutinizer
   #+begin_src sh
     ruby scrutinizer.rb
   #+end_src
   which should result in the following output to your terminal
   #+begin_example 
     initializing ixm connection
     creating board group
     telling boards I am here [24]
     got packet "c6 f"
     2
     Warning: empty x range [0:0], adjusting to [-1:1]
     got packet "c111 fl"
     4
     got packet "c81 fr"
     6
     got packet "c20 fll"
     6
     got packet "c16 f"
     6
     got packet "c94 fl"
     6
     ...
   #+end_example
   and which will also begin creating images in =/tmp/scrutinizer/=
3) to generate an animation of the images output by the scrutinizer
   try to following command (which uses [[http://www.imagemagick.org/script/index.php][imagemagick]])
   #+begin_src sh
     cd /tmp/scrutinizer
     convert -delay 20 -loop 1 group.*.png group.gif
   #+end_src
   the resulting =group.gif=, should look something like the following
   [[file:data/group.gif]]

** evaluator
  :PROPERTIES:
  :CUSTOM_ID: evaluator
  :END:
This sketch allows boards to evaluate strings of integers and
operators (=+=, =-=, =*=, =/=) on board using reverse polish notation.

* Issues / Notes
** new error code
after running multiple experiments with libixm, I've managed to
uncover a new error code...

: 1 red, 5 green, 6 blue

which means...

: /**< Failed to create an alarm when needed */

this should hopefully be fixed now...

** new segfaults...
this is the pre-fault output
#+begin_example 
  L 
  L 6 second on xxxx***
  L best fitness is 9965
  L mean fitness is 14188.25
  L best individual is 10 long and is 9x9+x92+**
  i 9x9+x9x99x*x*
  i 9x*x9+x+x92+**
  i 9x9+x*2++x*
  i 9x9+x9x99x*x*
  i 9x9x9+x*2++x*
  i 9x9+x9xx992+**
  L 
  L 7 second on xxxx***
  L best fitness is 2892
  L mean fitness is 12357.34
  L best individual is 13 long and is 9x7+x9x9*x*x*
  i 9x9x9+x*2++x*
  i 9x9+x9x99x9+x+x92+**
  i 9x9+x9x99x9+x+x92+**
  i 9x9x9+x+xx9*x*x*
  i 9x7+*9499**x*
  i 9x9+x9x99x98x*2++x9*x*x*L
  L 
  L 8 second on xxxx***
  L best fitness is 2892
  L mean fitness is 9667.04
  L best individual is 26 long and is 9x9+x9x99x9+x*2++x9*x*x*L
  i 9x9+x9x99x9+x*2++x9*x*x*L
  i 9x9+x9x99x9+x*2++x9*x*x*L
  i 9x9+x9x99x9+x*2++x9*x*x*L
  Ln Sun Nov  1 16:00:10 2009 [North baud rate set to 9600]
#+end_example

more careful maintenance of individuals seems to have fixed this issue

** size overflow
It looks like passing individuals by value rather than by reference is
overflowing the chips.  begin to change to passing by reference.

** hard goals

| goal               | best fitness | after      | meaning               |
|--------------------+--------------+------------+-----------------------|
| g 9x8x7x6x5**++*-* |          474 |            | x(x(30x + x + 7) - 8) |
| g 999xxx*****      |            0 | 19 seconds | 729x^3                |
|                    |              |            |                       |

** possibility of over-clocking the ixm w/alarms
this is currently handled by checking before every alarm is set and
when trying to set an alarm in the past, it instead sets it for a
second in the future.

currently this only happens when a new goal is being processed (which
makes sense, because that triggers a re-evaluation of every individual
in the population)
  
** DONE segfault (possibly crossover)

problem is in segfault, but it may not be noticed unless there are
large goals

we're copying past the end of our strings...

checking for end-of-string characters seems to help.

*** initial
at commit 36b2f62205e6b1564987d819aee282319664543a

still segfaulting, but seems to be caused by large goals, as show in
this example output
#+begin_example 
34 second on xxxx***
best fitness is 0
mean fitness is 153.19
best individual is 14 long and is 8+**8xx*x1/x**
g 9x8x7x6x5**++*-*
new goal is 9x8x7x6x5**++*-*
 
1 second on 9x8x7x6x5**++*-*
best fitness is 64410
mean fitness is 74313.37
best individual is 14 long and is 81**8xx*-1/x**
 
2 second on 9x8x7x6x5**++*-*
best fitness is 64125
mean fitness is 64353.00
best individual is 8 long and is xx*-1/1*
 
3 second on 9x8x7x6x5**++*-*
best fitness is 61966
mean fitness is 64070.36
best individual is 17 long and is 311*88**8-x*-1/1*
 
4 second on 9x8x7x6x5**++*-*
best fitness is 61641
mean fitness is 63532.51
best individual is 17 long and is 811*8-23xx8*-1/9*
 
5 second on 9x8x7x6x5**++*-*
best fitness is 47562
mean fitness is 61740.08
best individual is 17 long and is 311788**8-x*-1/1*
 
6 second on 9x8x7x6x5**++*-*
best fitness is 41028
mean fitness is 57034.68
best individual is 17 long and is 315788**8-x*-1/5*
 
7 second on 9x8x7x6x5**++*-*
Ln Mon Oct 26 18:02:06 2009 [North baud rate set to 9600]
  C-c C-c%                                                                                                          
$
#+end_example

*** does it segfault w/crossover commented out?
It seems that with crossover commented out, there is no possibility of
segfault.

* Experiments
** first suite
5 runs each of the following goals
| "xx*" | "xxx**" | "7xx*+" | "987xxx*-+*+" |

over all combinations of the following parameters
| GP parameter    | different values (normally milliseconds per execution) |
|-----------------+--------------------------------------------------------|
| mutation        | (0 10)                                                 |
| breeding        | (0 10)                                                 |
| injection       | (0 10)                                                 |
| tournament size | (100 4 1)                                              |

resulting in 420 total runs -- after removing those runs where mutation,
breeding and injection are all 0

*** results
#+srcname: first_suite_results
#+begin_src ruby :results output raw :exports code
  class Result
    attr_accessor :m, :b, :i, :t, :g, :raw
    def initialize(m, b, i, t, g)
      self.m = m; self.b = b; self.i = i; self.t = t; self.g = g
    end
    def counts
      self.raw.split("\n").
        map{|l| [Float($1), Float($2)] if l.match(/([\.\d]+)[ \t]([\.\d]+)/)}.compact
    end
    def runtime() self.counts.size end
    def average
      if self.runtime > 0
        self.counts.inject(0){ |sum, n| sum + n[1] } / self.runtime
      else
        -1
      end
    end
  end
  
  puts "|mutation|breeding|injection|tournament|goal|runtime|average|"
  puts "|--------"
  base = './results/first_suite'
  Dir.entries(base).map do |e|
    if e.match(/r_m.(\d+)_b.(\d+)_i.(\d+)_t.(\d+)_g.(\d+).(\d+)/)
      r = Result.new($1, $2, $3, $4, Float("#{$5}.#{$6}"))
      r.raw = File.read(File.join(base, e))
      r
    end
  end.compact.each do |r|
    puts "|"+[:m, :b, :i, :t, :g, :runtime, :average].
      map{ |meth| r.send(meth).to_s}.join("|")+"|"
  end
#+end_src

#+resname: first_suite_results
| mutation | breeding | injection | tournament | goal | runtime |          average |
|----------+----------+-----------+------------+------+---------+------------------|
|        0 |        0 |        10 |        100 |  0.1 |       1 |              0.0 |
|        0 |        0 |        10 |        100 |  0.0 |      10 |            106.5 |
|        0 |        0 |        10 |        100 |  1.0 |      10 |           1490.4 |
|        0 |        0 |        10 |          1 |  0.4 |      10 |             27.9 |
|        0 |        0 |        10 |          4 |  0.0 |      10 |             74.9 |
|        0 |        0 |        10 |        100 |  0.3 |      20 |             82.1 |
|        0 |        0 |        10 |          4 |  0.4 |      20 |             98.6 |
|        0 |        0 |        10 |        100 |  0.2 |      30 |             84.0 |
|        0 |        0 |        10 |          4 |  0.3 |      30 | 81.4666666666667 |
|        0 |        0 |        10 |          1 |  0.2 |      40 |             36.2 |
|        0 |        0 |        10 |          1 |  0.1 |      50 |            72.74 |
|        0 |        0 |        10 |          4 |  0.1 |      50 |             63.0 |
|        0 |        0 |        10 |          4 |  0.2 |      50 |             67.6 |
|        0 |       10 |         0 |        100 |  0.0 |      50 |            102.1 |
|        0 |        0 |        10 |          1 |  0.3 |      60 | 75.0833333333333 |
|        0 |        0 |        10 |        100 |  0.4 |      69 |  77.536231884058 |
|        0 |        0 |        10 |          1 |  0.0 |     120 | 72.8833333333333 |
|        0 |       10 |         0 |          1 |  3.1 |     272 | 1619.76838235294 |
|        0 |        0 |        10 |        100 |  1.3 |     298 | 1057.09395973154 |
|        0 |        0 |        10 |        100 |  2.3 |     298 | 69.8590604026846 |
|        0 |        0 |        10 |        100 |  3.2 |     298 | 1305.03020134228 |
|        0 |        0 |        10 |          1 |  1.1 |     298 | 941.429530201342 |
|        0 |        0 |        10 |          1 |  2.0 |     298 |             52.0 |
|        0 |        0 |        10 |          1 |  2.3 |     298 | 46.0604026845638 |
|        0 |        0 |        10 |          1 |  3.3 |     298 | 1210.45637583893 |
|        0 |        0 |        10 |          4 |  1.0 |     298 | 513.469798657718 |
|        0 |        0 |        10 |          4 |  1.4 |     298 | 1031.43959731544 |
|        0 |        0 |        10 |          4 |  2.3 |     298 |  62.003355704698 |
|        0 |        0 |        10 |          4 |  3.3 |     298 |  1301.6677852349 |
|        0 |       10 |         0 |        100 |  0.1 |     298 |            112.0 |
|        0 |       10 |         0 |        100 |  0.3 |     298 |            158.0 |
|        0 |       10 |         0 |        100 |  0.4 |     298 |            150.0 |
|        0 |       10 |         0 |        100 |  1.2 |     298 |           1851.0 |
|        0 |       10 |         0 |        100 |  1.3 |     298 |           1773.0 |
|        0 |       10 |         0 |        100 |  2.2 |     298 |            225.0 |
|        0 |       10 |         0 |        100 |  2.4 |     298 |            130.0 |
|        0 |       10 |         0 |        100 |  3.1 |     298 |           1652.0 |
|        0 |       10 |         0 |        100 |  3.4 |     298 |           1644.0 |
|        0 |       10 |         0 |          1 |  0.3 |     298 |             82.0 |
|        0 |       10 |         0 |          1 |  1.2 |     298 | 1932.04026845638 |
|        0 |       10 |         0 |          1 |  2.4 |     298 |            225.0 |
|        0 |       10 |         0 |          1 |  3.3 |     298 | 1648.04026845638 |
|        0 |       10 |         0 |          4 |  0.2 |     298 | 93.7718120805369 |
|        0 |       10 |         0 |          4 |  1.1 |     298 | 1657.98322147651 |
|        0 |       10 |         0 |          4 |  2.0 |     298 |            347.0 |
|        0 |       10 |         0 |          4 |  2.4 |     298 | 228.271812080537 |
|        0 |       10 |         0 |          4 |  3.3 |     298 | 1654.02684563758 |
|        0 |        0 |        10 |        100 |  1.1 |     299 | 1257.95986622074 |
|        0 |        0 |        10 |        100 |  1.2 |     299 | 1088.00668896321 |
|        0 |        0 |        10 |        100 |  1.4 |     299 | 1040.26755852843 |
|        0 |        0 |        10 |        100 |  2.0 |     299 |             52.0 |
|        0 |        0 |        10 |        100 |  2.1 |     299 | 65.5484949832776 |
|        0 |        0 |        10 |        100 |  2.2 |     299 | 65.4414715719063 |
|        0 |        0 |        10 |        100 |  2.4 |     299 |  65.438127090301 |
|        0 |        0 |        10 |        100 |  3.0 |     299 |  1456.5016722408 |
|        0 |        0 |        10 |        100 |  3.1 |     299 | 849.190635451505 |
|        0 |        0 |        10 |        100 |  3.3 |     299 | 1001.19732441472 |
|        0 |        0 |        10 |        100 |  3.4 |     299 |  1430.7491638796 |
|        0 |        0 |        10 |          1 |  1.0 |     299 | 974.578595317726 |
|        0 |        0 |        10 |          1 |  1.2 |     299 | 1094.94648829431 |
|        0 |        0 |        10 |          1 |  1.3 |     299 | 1151.73913043478 |
|        0 |        0 |        10 |          1 |  1.4 |     299 | 1086.51170568562 |
|        0 |        0 |        10 |          1 |  2.1 |     299 | 34.7090301003344 |
|        0 |        0 |        10 |          1 |  2.2 |     299 | 68.3277591973244 |
|        0 |        0 |        10 |          1 |  2.4 |     299 |  69.247491638796 |
|        0 |        0 |        10 |          1 |  3.0 |     299 | 1142.45150501672 |
|        0 |        0 |        10 |          1 |  3.1 |     299 | 1382.72909698997 |
|        0 |        0 |        10 |          1 |  3.2 |     299 | 1034.31772575251 |
|        0 |        0 |        10 |          1 |  3.4 |     299 | 1195.61538461538 |
|        0 |        0 |        10 |          4 |  1.1 |     299 | 503.561872909699 |
|        0 |        0 |        10 |          4 |  1.2 |     299 | 1038.90301003344 |
|        0 |        0 |        10 |          4 |  1.3 |     299 | 950.518394648829 |
|        0 |        0 |        10 |          4 |  2.0 |     299 | 21.7391304347826 |
|        0 |        0 |        10 |          4 |  2.1 |     299 | 67.9899665551839 |
|        0 |        0 |        10 |          4 |  2.2 |     299 | 57.5652173913044 |
|        0 |        0 |        10 |          4 |  2.4 |     299 | 36.0501672240803 |
|        0 |        0 |        10 |          4 |  3.0 |     299 | 706.086956521739 |
|        0 |        0 |        10 |          4 |  3.1 |     299 | 1102.29431438127 |
|        0 |        0 |        10 |          4 |  3.2 |     299 |  1184.6254180602 |
|        0 |        0 |        10 |          4 |  3.4 |     299 | 1234.26086956522 |
|        0 |       10 |         0 |        100 |  0.2 |     299 | 175.428093645485 |
|        0 |       10 |         0 |        100 |  1.0 |     299 | 1868.23411371237 |
|        0 |       10 |         0 |        100 |  1.1 |     299 |           1656.0 |
|        0 |       10 |         0 |        100 |  1.4 |     299 | 1868.67892976589 |
|        0 |       10 |         0 |        100 |  2.0 |     299 |            245.0 |
|        0 |       10 |         0 |        100 |  2.1 |     299 |            229.0 |
|        0 |       10 |         0 |        100 |  2.3 |     299 |            225.0 |
|        0 |       10 |         0 |        100 |  3.0 |     299 |           1827.0 |
|        0 |       10 |         0 |        100 |  3.2 |     299 | 1646.02675585284 |
|        0 |       10 |         0 |        100 |  3.3 |     299 |           1644.0 |
|        0 |       10 |         0 |          1 |  0.0 |     299 | 443.903010033445 |
|        0 |       10 |         0 |          1 |  0.1 |     299 |            200.0 |
|        0 |       10 |         0 |          1 |  0.2 |     299 |            225.0 |
|        0 |       10 |         0 |          1 |  0.4 |     299 | 93.6488294314381 |
|        0 |       10 |         0 |          1 |  1.0 |     299 |           1773.0 |
|        0 |       10 |         0 |          1 |  1.1 |     299 |           1695.0 |
|        0 |       10 |         0 |          1 |  1.3 |     299 | 1695.92307692308 |
|        0 |       10 |         0 |          1 |  1.4 |     299 | 1656.13043478261 |
|        0 |       10 |         0 |          1 |  2.0 |     299 |             78.0 |
|        0 |       10 |         0 |          1 |  2.1 |     299 |             70.0 |
|        0 |       10 |         0 |          1 |  2.2 |     299 | 65.0702341137124 |
|        0 |       10 |         0 |          1 |  2.3 |     299 | 225.200668896321 |
|        0 |       10 |         0 |          1 |  3.0 |     299 | 1730.94648829431 |
|        0 |       10 |         0 |          1 |  3.2 |     299 | 1646.08026755853 |
|        0 |       10 |         0 |          1 |  3.4 |     299 |           1650.0 |
|        0 |       10 |         0 |          4 |  0.0 |     299 |            375.0 |
|        0 |       10 |         0 |          4 |  0.1 |     299 |            181.0 |
|        0 |       10 |         0 |          4 |  0.3 |     299 |  199.66220735786 |
|        0 |       10 |         0 |          4 |  0.4 |     299 |            229.0 |
|        0 |       10 |         0 |          4 |  1.0 |     299 |           1951.0 |
|        0 |       10 |         0 |          4 |  1.2 |     299 | 1052.02675585284 |
|        0 |       10 |         0 |          4 |  1.3 |     299 |           1940.0 |
|        0 |       10 |         0 |          4 |  1.4 |     299 | 1825.05351170569 |
|        0 |       10 |         0 |          4 |  2.1 |     299 | 94.5652173913043 |
|        0 |       10 |         0 |          4 |  2.2 |     299 | 225.040133779264 |
|        0 |       10 |         0 |          4 |  2.3 |     299 | 93.8829431438127 |
|        0 |       10 |         0 |          4 |  3.0 |     299 | 1708.03344481605 |
|        0 |       10 |         0 |          4 |  3.1 |     299 |           1646.0 |
|        0 |       10 |         0 |          4 |  3.2 |     299 |           1648.0 |
|        0 |       10 |         0 |          4 |  3.4 |     299 | 1607.15719063545 |
-:14:in `+': Array can't be coerced into Fixnum (TypeError)
	from -:14:in `average'
	from -:34:in `inject'
	from -:14:in `each'
	from -:14:in `inject'
	from -:14:in `average'
	from -:32:in `send'
	from -:32
	from -:31:in `map'
	from -:31
	from -:24:in `each'
	from -:24
|mutation|breeding|injection|tournament|goal|runtime|average|
|--------


* COMMENT publishing
#+begin_src emacs-lisp :results silent
  (setq gp4ixm-dir (file-name-directory (or load-file-name buffer-file-name)))
  (unless (boundp 'org-publish-project-alist)
    (setq org-publish-project-alist nil))
  (add-to-list 'org-publish-project-alist
               `("gp4ixm-html"
                  :base-directory ,gp4ixm-dir
                  :base-extension "org"
                  ;; :publishing-directory "www"
                  :publishing-directory "doc"
                  :index-filename "gp4ixm.org"
                  :auto-postamble nil
                  :postamble
                  "<div class=\"clear-fix\"></div>
  <div id=\"doc-info\">
    This document is created
    using <a href=\"http://orgmode.org/\">Org-mode</a>
    and <a href=\"http://orgmode.org/worg/org-contrib/babel/org-babel.php\">Org-babel</a>.
    The original plain-text document is available
    at <a href=\"gp4ixm.org\">gp4ixm.org</a>
    (<a href=\"gp4ixm.org.html\" title=\"how this document looks from inside Emacs\">preview</a>).
  </div>"
                  :publishing-function (org-publish-org-to-html org-publish-org-to-org)
                  :plain-source t
                  :htmlized-source t))
  (add-to-list 'org-publish-project-alist
               `("gp4ixm-data"
                 :base-directory ,(expand-file-name "data" gp4ixm-dir)
                 :base-extension "jpg\\|gif\\|png\\|pdf\\|css"
                  :publishing-directory "doc/data"
                  :publishing-function org-publish-attachment))
  (add-to-list 'org-publish-project-alist
               '("gp4ixm" :components
                 ("gp4ixm-html" "gp4ixm-data")))
#+end_src
